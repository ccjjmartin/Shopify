<?php

/**
 * @file
 * Install / update hooks.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Url;

/**
 * Implements hook_requirements().
 */
function shopify_requirements($phase) {
  $requirements = [];

  if ($phase === 'install') {

    // Check if we're running a 64-bit version of PHP.
    if (PHP_INT_SIZE === 4) {
      $requirements['shopify'] = [
        'title' => t('Shopify eCommerce'),
        'description' => t('Unable to install Shopify eCommerce. Your server is running the 32-bit version of PHP. A 64-bit version is required.'),
        'severity' => REQUIREMENT_ERROR,
      ];
      return $requirements;
    }

    if (!class_exists('\Shopify\PrivateApp')) {
      $requirements['shopify'] = [
        'title' => t('Shopify Client library not available.'),
        'description' => t('Could not load the Shopify\Client class file.'),
        'severity' => REQUIREMENT_ERROR,
      ];
    }

    if (!function_exists('shopify_api_client')) {
      $requirements['shopify'] = [
        'title' => t('Shopify API module is not enabled.'),
        'description' => t('Please enable the Shopify API module before installing the Shopify eCommerce module.'),
        'severity' => REQUIREMENT_ERROR,
      ];
      return $requirements;
    }

    $client = shopify_api_client();
    if (!$client) {
      $shopify_api_admin = Url::fromRoute('shopify_api.admin');
      $requirements['shopify'] = [
        'title' => t('Shopify API settings are not setup.'),
        'description' => t('Shopify API settings must be configured before enabling the Shopify module. <a href=":link">Setup API Credentials</a>.', [
          ':link' => $shopify_api_admin->toString(),
        ]),
        'severity' => REQUIREMENT_ERROR,
      ];
    }

  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function shopify_install() {
  // Upon install, setup shop info.
  shopify_shop_info(NULL, $refresh = TRUE);
}

/**
 * Changes inventory fields from unsigned to signed.
 */
function shopify_update_8101() {
  $schema = Database::getConnection()->schema();
  $entityTypeDefinition = \Drupal::entityTypeManager()->getDefinition('shopify_product_variant');
  $spec = [
    'type' => 'int',
    'size' => 'normal',
    'unsigned' => FALSE,
    'not null' => FALSE,
  ];
  $schema->changeField($entityTypeDefinition->getBaseTable(), 'inventory_quantity', 'inventory_quantity', $spec);
  $schema->changeField($entityTypeDefinition->getBaseTable(), 'old_inventory_quantity', 'old_inventory_quantity', $spec);

  // Update entity definition.
  \Drupal::service('entity.definition_update_manager')->installEntityType($entityTypeDefinition);
}

/**
 * Changes shopify_collection_id field from signed to unsigned.
 */
function shopify_update_8102() {
  $schema = Database::getConnection()->schema();
  $spec = [
    'type' => 'int',
    'size' => 'normal',
    'unsigned' => TRUE,
    'not null' => TRUE,
  ];
  $schema->changeField('taxonomy_term__field_shopify_collection_id', 'field_shopify_collection_id_value', 'field_shopify_collection_id_value', $spec);
}
